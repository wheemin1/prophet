# OracleStone 프로젝트 전체 코드 분석 및 상세 정리

## 📋 프로젝트 개요
**OracleStone**은 "한 줄 예언"이라는 이름의 웹 애플리케이션으로, 사용자에게 개인화된 예언을 제공하는 PWA(Progressive Web App)입니다.

### 핵심 컨셉
- **"오늘은 단 하나의 예언만 주어진다"**라는 컨셉
- 신비로운 UI/UX와 봉인 해제 메커니즘
- 개인정보 보호: 모든 데이터는 클라이언트(브라우저)에만 저장
- 4가지 기간별 예언: 일일(밈), 주간(반진지), 월간(장엄), 연간(신탁)

## 🏗️ 프로젝트 구조

### 1. 기술 스택
- **Frontend**: React 18 + TypeScript + Vite
- **Backend**: Express.js + Node.js
- **UI Framework**: Tailwind CSS + Radix UI Components
- **상태관리**: TanStack Query + Local Storage
- **라우팅**: Wouter (경량 라우터)
- **폰트**: Noto Sans KR (한국어 최적화)

### 2. 폴더 구조
```
c:\web\OracleStone/
├── client/                 # 프론트엔드 (React SPA)
│   ├── index.html         # PWA 설정 포함
│   ├── public/            # PWA manifest, service worker
│   └── src/
│       ├── components/    # UI 컴포넌트들
│       ├── hooks/         # 커스텀 훅들
│       ├── lib/           # 핵심 비즈니스 로직
│       └── pages/         # 라우트 페이지들
├── server/                # 백엔드 (Express)
├── shared/                # 공유 스키마 (Zod)
└── 설정파일들              # package.json, tailwind.config.ts 등
```

## 🎯 핵심 기능 분석

### 1. 예언 생성 엔진 (`lib/fortune-engine.ts`)
```typescript
// 핵심 개념: 결정론적 시드 기반 예언 생성
- 사용자 프로필 해시 생성 (이름 + 생년월일 + 호칭스타일)
- 기간별 키 생성 (YYYY-MM-DD, YYYY-WW, YYYY-MM, YYYY)
- 시드 기반 랜덤 템플릿 선택
- 호칭 스타일 적용 (short/full/traveler)
```

**주요 함수들:**
- `generateProfileHash()`: 개인정보를 해시로 변환
- `generateSeed()`: 날짜와 프로필로 결정론적 시드 생성
- `seededRandom()`: 시드 기반 랜덤 생성기
- `generateFortune()`: 최종 예언 객체 생성

### 2. 예언 템플릿 시스템 (`lib/templates.ts`)
총 **188줄**에 걸친 방대한 템플릿 라이브러리:

**일일 예언 (밈 톤, 50개)**:
```
"오늘 네 적은 프린터 드라이버다."
"점심은 네 마음이 아니라 지갑이 정하리라."
"버그는 사라지지 않는다. 다만 자리를 옮길 뿐."
```

**주간 예언 (반진지 톤, 40개)**:
```
"이번 주, 작은 결정이 큰 물결이 되리라."
"너를 늦추는 것은 난관이 아니라 미루기다."
```

**월간 예언 (장엄 톤, 40개)**:
```
"이 달, 네 앞의 벽은 문을 위장한 것이리라."
"바람은 거세나 너의 발은 흔들리지 않으리."
```

**연간 예언 (신탁 톤, 24개)**:
```
"이 해, 네가 찾는 빛은 너의 그림자를 먼저 비추리라..."
"사라진 길을 탓하지 마라. 너의 발자국이 지도를 새로 그리리라..."
```

### 3. 사용자 인터페이스 컴포넌트

#### A. 메인 화면 (`pages/home.tsx`, 311줄)
```typescript
// 상태 관리
- 선택된 기간 (daily/weekly/monthly/yearly)
- 사용자 프로필 (이름, 생년월일, 타임존)
- 설정 (알림, 사운드, 테마)
- 모달/패널 표시 상태들

// 핵심 기능
- PWA 설치 배너 로직
- 자동 개인화 폼 접기
- 다음 예언 시간 계산
- 프로필 칩 표시
```

#### B. 봉인 해제 인터페이스 (`components/FortuneDisplay.tsx`, 339줄)
```typescript
// 핵심 메커니즘
- 3초간 길게 누르기로 봉인 해제
- 진행률 표시 (원형 프로그레스)
- 데스크톱: 스페이스바 홀드
- 모바일: 터치 홀드
- 햅틱 피드백 지원

// 예언 표시 후 기능
- 공유 기능 (Web Share API + 클립보드 폴백)
- 카드 이미지 저장
- 반응 저장 (좋았어/미묘해)
```

#### C. 기간 선택 탭 (`components/PeriodTabs.tsx`)
```typescript
const periodLabels = {
  daily: { main: "오늘", sub: "밈" },
  weekly: { main: "이주", sub: "반진지" },
  monthly: { main: "이달", sub: "장엄" },
  yearly: { main: "올해", sub: "신탁" }
};
```

#### D. 개인화 폼 (`components/PersonalizationForm.tsx`)
```typescript
// 입력 필드
- 이름 (선택사항)
- 생년월일 (선택사항)
- 개인화 적용 버튼

// 데이터 처리
- 입력값 트림 처리
- undefined 변환으로 선택사항 처리
```

#### E. 예언 기록 (`components/HistoryList.tsx`)
```typescript
// 기능
- 기간별 예언 기록 표시
- 최근 3개 + 더보기 버튼
- 반응 표시 (좋았어/미묘해)
- 날짜 표시 (오늘/어제/구체적 날짜)
```

#### F. 설정 패널 (`components/SettingsPanel.tsx`)
```typescript
// 설정 항목
- 사운드 효과 토글
- 모션 효과 토글  
- 다크모드 (고정, 변경 불가)

// 데이터 관리
- JSON 내보내기
- 데이터 가져오기
- 전체 초기화
```

### 4. 커스텀 훅들

#### A. `use-fortune.ts` (113줄)
```typescript
// 핵심 로직
- 현재 기간 키 계산 (타임존 고려)
- 기존 예언 로드 또는 새 생성
- 다음 예언 시간 계산
- 예언 생성 상태 관리

// 시간 계산 로직
- 일일: 다음날 00:00
- 주간: 다음 주 월요일 00:00
- 월간: 다음 달 1일 00:00
- 연간: 내년 1월 1일 00:00
```

#### B. `use-local-storage.ts`
- 브라우저 로컬 스토리지와 React 상태 동기화
- 타입 안전성 보장
- 초기값 설정 지원

### 5. 백엔드 구조

#### A. 서버 엔트리 (`server/index.ts`)
```typescript
// 미들웨어
- express.json() + urlencoded
- 로깅 미들웨어 (API 요청 추적)
- 에러 핸들링 미들웨어

// 개발/프로덕션 분기
- 개발: Vite 개발 서버 설정
- 프로덕션: 정적 파일 서빙
```

#### B. 라우트 (`server/routes.ts`)
```typescript
// API 엔드포인트
- GET /api/health: 헬스체크
- GET /api/templates/:period: 템플릿 개수 반환
- POST /api/analytics: 분석 이벤트 로깅
```

#### C. 스토리지 (`server/storage.ts`)
```typescript
// 단순한 메모리 스토리지
- 분석 이벤트 콘솔 로깅만 지원
- 실제 데이터 저장 없음 (개인정보 보호)
```

### 6. 공유 스키마 (`shared/schema.ts`)
```typescript
// Zod 스키마 정의
- UserProfile: 이름, 생년월일, 타임존, 호칭스타일
- Settings: 사운드, 모션, 테마, 동의여부  
- Fortune: 예언 객체 (id, period, text, 메타데이터)
- FortuneHistory: 기간별 예언 기록
```

## 🎨 디자인 시스템

### 1. 색상 팔레트 (`index.css`)
```css
/* 신비로운 색상 체계 */
--mystical-dark: hsl(210, 47%, 8%)     /* 배경 */
--mystical-purple: hsl(248, 53%, 25%)  /* 액센트 */
--mystical-blue: hsl(214, 68%, 31%)    /* 보조 */
--mystical-gold: hsl(45, 87%, 54%)     /* 주요 강조 */
--mystical-silver: hsl(0, 0%, 75%)     /* 텍스트 */
--mystical-glow: hsl(48, 96%, 71%)     /* 빛나는 효과 */
```

### 2. 핵심 CSS 클래스들
```css
/* 그라데이션 배경 */
.mystical-gradient: 다층 그라데이션 + 블러 효과

/* 글로우 효과 */
.mystical-glow-enhanced: 다중 박스 섀도우 + 호버 애니메이션

/* 칩 디자인 */
.chip-enhanced: 블러 배경 + 골드 테두리

/* 봉인 컨테이너 */
.seal-container: 방사형 그라데이션 배경

/* 인터랙티브 버튼 */
.interactive-button: 스케일 트랜지션

/* 동적 카드 */
.dynamic-card: 복합 그라데이션 + 다중 섀도우
```

### 3. 애니메이션들
```css
@keyframes shimmer: 텍스트 반짝임 효과
@keyframes floating: 부유하는 듯한 움직임  
@keyframes pulse-glow: 맥박같은 글로우
@keyframes seal-break: 봉인 해제 애니메이션
@keyframes fortune-reveal: 예언 등장 애니메이션
```

## ⚙️ 설정 및 빌드

### 1. Vite 설정 (`vite.config.ts`)
```typescript
// 플러그인
- React 지원
- Replit 에러 오버레이
- 개발환경 카르토그래퍼

// 별칭 설정
- @: client/src
- @shared: shared  
- @assets: attached_assets
```

### 2. Tailwind 설정 (`tailwind.config.ts`)
- 신비로운 색상 확장
- 커스텀 애니메이션 등록
- 한국어 폰트 설정
- tailwindcss-animate 플러그인

### 3. PWA 설정 (`manifest.json`)
```json
{
  "name": "한 줄 예언",
  "short_name": "한 줄 예언", 
  "description": "오늘은 단 하나의 예언만 주어진다",
  "display": "standalone",
  "background_color": "#0B1426",
  "theme_color": "#D4AF37"
}
```

## 🔒 개인정보 보호 설계

### 1. 데이터 저장 정책
- **서버 저장 없음**: 모든 개인 데이터는 클라이언트만
- **로컬 스토리지**: 브라우저 내부에만 저장
- **해시 변환**: 이름/생년월일을 해시로 변환 후 사용
- **익명 분석**: 개인정보 없는 사용 패턴만 수집

### 2. 시드 생성 방식
```typescript
// 개인정보를 직접 사용하지 않고 해시로 변환
profileHash = hash(name + birthdate + honorificStyle)
seed = hash(profileHash + periodKey)
```

## 🎮 사용자 경험 (UX)

### 1. 핵심 인터랙션 플로우
1. **접속**: PWA 설치 유도 배너
2. **개인화**: 선택적 이름/생년월일 입력
3. **기간 선택**: 4가지 톤 중 선택
4. **봉인 해제**: 3초간 룬 터치/스페이스바 홀드
5. **예언 확인**: 개인화된 한 줄 예언 표시
6. **반응**: 좋았어/미묘해 선택
7. **공유/저장**: 텍스트 공유 또는 카드 이미지 저장

### 2. 접근성 고려사항
- **키보드 지원**: 스페이스바로 봉인 해제
- **햅틱 피드백**: 모바일 진동 지원
- **고대비**: 골드/실버 색상으로 가독성 확보
- **대형 터치 영역**: 44px+ 최소 크기
- **명확한 라벨**: 한국어 레이블 + 설명

### 3. 모바일 최적화
- **터치 친화적**: 긴 누르기 인터페이스
- **단일 화면**: 스크롤 최소화
- **빠른 로딩**: 로컬 생성으로 즉시 결과
- **오프라인 지원**: PWA로 네트워크 불필요

## 🎯 비즈니스 로직의 핵심

### 1. 결정론적 예언 생성
- 같은 날, 같은 사람 = 같은 예언 보장
- 날짜가 바뀌면 새로운 예언
- 개인정보 변경 시 다른 예언

### 2. 4단계 톤 시스템
```
일일(밈): 가벼운 IT/일상 유머
주간(반진지): 실용적 조언과 격려  
월간(장엄): 철학적이고 깊이 있는 메시지
연간(신탁): 고전적 신탁 문체의 장대한 예언
```

### 3. 한국어 호칭 시스템
```typescript
honorificStyle: "short" | "full" | "traveler"
- short: "님" 호칭
- full: "여" 호칭  
- traveler: "여행자" 호칭
```

## 📊 프로젝트 규모 통계

### 코드 라인 수 (추정)
- **총 라인 수**: 약 2,500+ 줄
- **TypeScript**: 약 1,800줄
- **CSS**: 약 430줄  
- **HTML**: 약 50줄
- **JSON 설정**: 약 220줄

### 주요 파일별 규모
1. `client/src/pages/home.tsx`: 311줄 (메인 화면)
2. `client/src/components/FortuneDisplay.tsx`: 339줄 (핵심 UI)
3. `client/src/lib/templates.ts`: 188줄 (예언 템플릿)
4. `client/src/hooks/use-fortune.ts`: 113줄 (핵심 로직)
5. `client/src/index.css`: 432줄 (스타일링)

## 🚀 배포 및 실행

### 개발 모드
```bash
npm run dev  # 개발 서버 시작
```

### 프로덕션 빌드
```bash
npm run build  # Vite 빌드 + esbuild 서버 번들
npm start     # 프로덕션 서버 실행
```

### 환경 변수
- `NODE_ENV`: development/production
- `PORT`: 서버 포트 (기본 5000)

---

**이 프로젝트는 개인정보 보호를 최우선으로 하면서도, 매력적인 UX와 결정론적 알고리즘을 통해 일관성 있는 개인화 경험을 제공하는 웹 애플리케이션입니다.** 한국어 UI/UX에 최적화되어 있으며, PWA로써 네이티브 앱과 유사한 경험을 제공합니다.